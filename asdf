import requests
from configure import api_key as api
from dateutil import parser
from datetime import datetime, timezone, timedelta
 
def post_message( channel,title,start_date,end_date,position):
    """슬랙 메시지 전송"""
    myToken = api['slack_bot']
    response = requests.post("https://slack.com/api/chat.postMessage",
        headers={"Authorization": "Bearer "+myToken},
        data={"channel": channel,"text":  ">*_Reminder_*\n"
                        +">*"+title+"*\n"
                        +">"+start_date
                        +end_date+"\n"
                        +">"+position+""
                        +"<!channel>"+"\n"
                        }
    )
def readDatabase(databaseId, ):
    headers = {
    "Authorization": "Bearer " + api["notion_token"],
    "Notion-Version": "2022-02-22"
    }
    readUrl = f"https://api.notion.com/v1/databases/{databaseId}/query"

    res = requests.post(readUrl, headers=headers)
    datas = res.json()
    
            
    today = timezone(timedelta(hours=9))
    today = datetime.now(today)
    today = str(today)[:10]

    tommorrow = timezone(timedelta(hours=9))
    tommorrow = datetime.now(tommorrow)+ timedelta(1)
    tommorrow = str(tommorrow)[:10]

    week = timezone(timedelta(hours=9))
    week = datetime.now(week)+ timedelta(7)
    week = str(week)[:10]
   
    for data in datas['results']:
        try:
            title,start_date,end_date,position="","","",""
            title=data["properties"]["Name"]["title"][0]['plain_text']
            start_date=data["properties"]["Date"]['date']['start']
            end_date=data["properties"]["Date"]['date']['end']
            position=data["properties"]["Event Type"]["multi_select"][0]["name"]
            start_date = parser.parse(start_date)
            end_date = parser.parse(end_date)
            #print(end_date)
            
        except IndexError as e:
            if title=="":
                pass
            else:
                position=""
            if(not end_date):
                end_date=""
        except Exception:
            pass
            

        
        if (title!="" and start_date!=""):
            try:
                check=start_date[:10]
                #시간 계산
                if((start_date==tommorrow or check == tommorrow)
                   or(start_date==today or check == today)
                   or(start_date==week or check == week)
                   ):
                    #시작시간 = 2023-04-05
                    if(start_date ==start_date[:10]):
                        if(end_date==start_date):
                            end_date=""
                        
                        if(end_date!=""):
                            end_date=" ~ "+end_date
                        post_message("#validator",title,start_date,end_date,position)
                    else:
                        start_date=start_date[:16]
                        start_date=datetime.strptime(start_date, '%Y-%m-%dT%H:%M')
                        start_date=start_date.strftime('%Y-%m-%d %I:%M %p')
                        if(end_date!=""):
                            end_date=end_date[:16]
                            end_date=datetime.strptime(end_date, '%Y-%m-%dT%H:%M')
                            end_date=" ~ "+str(end_date.strftime('%Y-%m-%d %I:%M %p'))
                        post_message("#validator",title,start_date,end_date,position)
                check=""    
            except TypeError as e:
                pass
                
readDatabase(api["databaseId"])





import requests
from configure import api_key as api
from datetime import datetime, timezone, timedelta
from dateutil import parser

TODAY = datetime.now(timezone(timedelta(hours=9))).strftime('%Y-%m-%d')
TOMORROW = (datetime.now(timezone(timedelta(hours=9))) + timedelta(1)).strftime('%Y-%m-%d')
WEEK = (datetime.now(timezone(timedelta(hours=9))) + timedelta(7)).strftime('%Y-%m-%d')

def post_message(channel, title, start_date, end_date, position):
    """Sends a message to a Slack channel."""
    my_token = api['slack_bot']
    text = (f">*_Reminder_*\n"
            f">*{title}*\n"
            f">{start_date}{end_date}\n"
            f">{position}<!channel>\n")
    response = requests.post(
        "https://slack.com/api/chat.postMessage",
        headers={"Authorization": "Bearer " + my_token},
        data={"channel": channel, "text": text}
    )

def read_database(database_id):
    """Reads data from a Notion database and sends reminders for upcoming events."""
    headers = {
        "Authorization": "Bearer " + api["notion_token"],
        "Notion-Version": "2022-02-22"
    }
    url = f"https://api.notion.com/v1/databases/{database_id}/query"
    response = requests.post(url, headers=headers)
    data = response.json()
    
    for item in data['results']:
        try:
            #print(item)
            title, start_date, end_date, position = "", "", "", ""
            title = item["properties"]["Name"]["title"][0]['plain_text']
            start_date = item["properties"]["Date"]['date']['start']
            end_date = item["properties"]["Date"]['date']['end']
            Events=item["properties"]["Event Type"]["multi_select"]
            position=[]
            for Event in Events:
                name=Event['name']
                position.append(name)
                #if(name==('Academic' 
                #   or "Bi-Weekly Review" 
                #   or "Keynote" 
                #   or "Management" 
                #   or "Offline Event" 
                #   or "Online Event")):
                    
                    #break
                #position[Event['name']]=1
                #if(position[Event['name']])

                
            #position = item["properties"]["Event Type"]["multi_select"][0]["name"]
            #print(len(position),position)
            #for pos in position:
                #if(position[pos]):
                #    print(position)
                    #print(title,position[pos])
            
            start_date = parser.parse(start_date)
            end_date = parser.parse(end_date)
        
        except IndexError as e:
            if title=="":
                pass
            else:
                position=""
            if(not end_date):
                end_date=""
        except Exception as e:
            #print(position)
            pass
        #print(title,start_date,end_date,position)
        if title and start_date:
            try:
               
                check=start_date[:10]
                #시간 계산
                if((start_date==TOMORROW or check == TOMORROW)
                   or(start_date==TODAY or check == TODAY)
                   or(start_date==WEEK or check == WEEK)
                   ):
                    #시작시간 = 2023-04-05
                    if(start_date ==start_date[:10]):
                        if(end_date==start_date):
                            end_date=""
                        if(end_date!=""):
                            end_date=" ~ "+end_date
                        #post_message("#validator",title,start_date,end_date,position)
                    else:
                        start_date=start_date[:16]
                        start_date=datetime.strptime(start_date, '%Y-%m-%dT%H:%M')
                        start_date=start_date.strftime('%Y-%m-%d %I:%M %p')
                        if(end_date!=""):
                            end_date=end_date[:16]
                            end_date=datetime.strptime(end_date, '%Y-%m-%dT%H:%M')
                            end_date=" ~ "+str(end_date.strftime('%Y-%m-%d %I:%M %p'))
                print(title,position)
                post_message("#validator",title,start_date,end_date,str(position))
                   
            except Exception as e:
                print(title,e)
                pass

if __name__ == '__main__':
    read_database(api["databaseId"])


import requests
from configure import api_key as api
from datetime import datetime, timezone, timedelta
from dateutil import parser

TODAY = datetime.now(timezone(timedelta(hours=9))).strftime('%Y-%m-%d')
TOMORROW = (datetime.now(timezone(timedelta(hours=9))) + timedelta(1)).strftime('%Y-%m-%d')
WEEK = (datetime.now(timezone(timedelta(hours=9))) + timedelta(7)).strftime('%Y-%m-%d')

def post_message(channel, title, start_date, end_date, position):
    """Sends a message to a Slack channel."""
    my_token = api['slack_bot']
    text = (f">*_Reminder_*\n"
            f">*{title}*\n"
            f">{start_date}{end_date}\n"
            f">{position}<!channel>\n")
    response = requests.post(
        "https://slack.com/api/chat.postMessage",
        headers={"Authorization": "Bearer " + my_token},
        data={"channel": channel, "text": text}
    )

def read_database(database_id):
    """Reads data from a Notion database and sends reminders for upcoming events."""
    headers = {
        "Authorization": "Bearer " + api["notion_token"],
        "Notion-Version": "2022-02-22"
    }
    url = f"https://api.notion.com/v1/databases/{database_id}/query"
    response = requests.post(url, headers=headers)
    data = response.json()
    
    for item in data['results']:
        try:
            #print(item)
            title, start_date, end_date, position = "", "", "", ""
            title = item["properties"]["Name"]["title"][0]['plain_text']
            start_date = item["properties"]["Date"]['date']['start']
            end_date = item["properties"]["Date"]['date']['end']
            Events=item["properties"]["Event Type"]["multi_select"]
            position=[]
            for Event in Events:
                name=Event['name']
                position.append(name)
                #if(name==('Academic' 
                #   or "Bi-Weekly Review" 
                #   or "Keynote" 
                #   or "Management" 
                #   or "Offline Event" 
                #   or "Online Event")):
                    
                    #break
                #position[Event['name']]=1
                #if(position[Event['name']])

                
            #position = item["properties"]["Event Type"]["multi_select"][0]["name"]
            #print(len(position),position)
            #for pos in position:
                #if(position[pos]):
                #    print(position)
                    #print(title,position[pos])
            
            start_date = parser.parse(start_date)
            end_date = parser.parse(end_date)
        
        except IndexError as e:
            if title=="":
                pass
            else:
                position=""
            if(not end_date):
                end_date=""
        except Exception as e:
            #print(position)
            pass
        #print(title,start_date,end_date,position)
        if title and start_date:
            try:
                start_date_str = start_date[:16] if len(start_date) > 10 else start_date[:10]
                start_date_dt = datetime.fromisoformat(start_date_str.replace("Z", "+00:00")).astimezone()
                if start_date_dt.date() in [datetime.fromisoformat(d).date() for d in [TOMORROW, TODAY, WEEK]]:
                    if len(start_date) == 10:
                        end_date_str = end_date[:16] if len(end_date) > 10 else None
                    else:
                        end_date_str = " ~ " + end_date[:16] if len(end_date) > 10 else None
                    end_date_dt = datetime.fromisoformat(end_date_str.replace("Z", "+00:00")).astimezone() if end_date_str else None
                    post_message("#validator", title, start_date_dt.strftime('%Y-%m-%d %I:%M %p'), end_date_dt.strftime('%Y-%m-%d %I:%M %p') if end_date_dt else "", position)
            except Exception as e:
                print(e)
                continue

if __name__ == '__main__':
    read_database(api["databaseId"])
